stages:
  - lint
  - build
  - test
  - deploy-token
  - deploy
  - rollback

default:
  tags:
    - cloud-k8s

variables:
  GET_SOURCES_ATTEMPTS: 3 # in case network error occurs
  # Link for project group in API
# YELB_GROUP_GITLAB_API_LINK: "$CI_SERVER_PROTOCOL:$CI_SERVER_HOST/api/v4/groups/$CI_PROJECT_NAMESPACE"

# Yamllint does not work well with helm templates therefore we exclude dir with them. They are checked by helm lint anyway.

lint-yaml:
  stage: lint
  image:
    name: cytopia/yamllint
    entrypoint: ["/bin/ash", "-c"]
  script:
    - 'yamllint -f colored . -d "{extends: relaxed, ignore: helm/templates, rules: {line-length: {max: 160}}}"'

lint-helm:
  stage: lint
  image:
    name: alpine/helm:3.10.2
    entrypoint: [""]
  script:
    - cd helm
    - helm lint

build-appserver:
  stage: build
  needs:
    - lint-yaml
    - lint-helm # ?
  image:
    name: docker/compose:1.23.2
  script:
    - echo $CI_JOB_TOKEN
    - echo $CI_REGISTRY
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - cd yelb-appserver
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/appserver:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID .
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/appserver:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
  after_script:
    - docker images --filter=reference=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/appserver -q | uniq | tail -n +2 | xargs -r docker rmi -f

build-ui:
  stage: build
  needs:
    - lint-yaml # ?
  image:
    name: docker/compose:1.23.2
  script:
    - cd yelb-ui
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ui:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID .
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ui:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
  after_script:
    - docker images --filter=reference=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ui -q | uniq | tail -n +2 | xargs -r docker rmi -f

test:
  stage: test
  needs:
    - build-appserver
    - build-ui
  image:
    name: docker/compose:1.23.2
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker network create yelb
    - docker run -d -p 4567:4567 --name yelb-appserver --network yelb
      $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/appserver:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
    - sleep 5
    - docker run --network yelb --name yelb-curl-appsrv curlimages/curl:7.87.0 yelb-appserver:4567 --retry 5 --retry-connrefused # appserver separate check
    - docker run -d -p 80:80 --name yelb-ui --network yelb
      $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ui:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
    - docker run --name yelb-curl-ui --network yelb curlimages/curl:7.87.0 yelb-ui:80 --retry 5 --retry-connrefused | grep '<title>Yelb</title>' # ui check
  after_script: # clean
    - docker images --filter=reference=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/appserver -q | uniq | tail -n +2 | xargs -r docker rmi -f
    - docker images --filter=reference=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ui -q | uniq | tail -n +2 | xargs -r docker rmi -f
    - docker ps -a --filter=name=yelb -q | xargs -r docker rm -f
    - docker network ls --filter name=yelb -q | xargs -r docker network rm

deploy-token:
  stage: deploy-token
  rules:
    - if: $DEPLOY_TOKEN_USER == null
      when: on_success
  image:
    name: alpine:3.17.2
  script:
    - apk add curl jq
    - TOKEN=$(curl -sS --request POST --header "PRIVATE-TOKEN:$GITLAB_PRIVATE_TOKEN" --header "Content-Type:application/json"
      --data '{"name":"Yelb deploy token", "scopes":["read_registry"]}'
      "$YELB_GROUP_GITLAB_API_LINK/deploy_tokens/")
    - DEPLOY_USER=$(echo $TOKEN | jq -r '.username')
    - DEPLOY_PASS=$(echo $TOKEN | jq -r '.token')
    - curl -sS --request POST --header "PRIVATE-TOKEN:$GITLAB_PRIVATE_TOKEN" "$YELB_GROUP_GITLAB_API_LINK/variables"
      --form "key=DEPLOY_TOKEN_USER" --form "value=$DEPLOY_USER"
    - curl -sS --request POST --header "PRIVATE-TOKEN:$GITLAB_PRIVATE_TOKEN" "$YELB_GROUP_GITLAB_API_LINK/variables"
      --form "key=DEPLOY_TOKEN_PASS" --form "value=$DEPLOY_PASS"

deploy:
  stage: deploy
  tags:
    - cloud-k8s
  needs:
    - job: lint-helm
    - job: test
    - job: deploy-token
      optional: true
  image: alpine/k8s:1.23.16
  script:
    - kubectl get namespace | grep "^yelb " || kubectl create namespace yelb
    - kubectl create secret docker-registry yelb-gitlab-registry --docker-server $CI_SERVER_HOST:5050
      --docker-email "mamleev156@yandex.ru" --docker-username "$DEPLOY_TOKEN_USER" --docker-password "$DEPLOY_TOKEN_PASS"
      --namespace yelb --dry-run=client -o yaml | kubectl apply -f -
    - helm upgrade --install yelb helm/
        --set appserver.image=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/appserver
        --set ui.image=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ui
        --set tag=$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
        --set db.server=$YELB_DB_ADDR
        --set db.port=$YELB_DB_PORT
        --set db.user=$YELB_DB_USER
        --set db.password=$YELB_DB_PASS
        --set db.name=$YELB_DB_NAME
        --set ingress.hosts={"$YELB_APP_DNS_NAME"}
        --set ingress.tls.hosts=$YELB_APP_DNS_NAME
        --namespace yelb
        --timeout 300s
        --debug
        --wait
        --atomic
  only:
    - master

rollback:
  stage: rollback
  tags:
    - cloud-k8s
  needs:
    - job: deploy
  image: alpine/k8s:1.23.16
  script:
    - helm rollback $CI_PROJECT_PATH_SLUG 0
        --namespace $CI_PROJECT_PATH_SLUG-$ENVIRONMENT
        --wait
        --timeout 300s
        --debug
  only:
    - master
  when: manual
